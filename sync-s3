#!/usr/bin/env bash

STORAGE_CLASS="STANDARD_IA"

fail() {
  echo -e "$1\n"
  exit 1
}

usage() {
  echo "$(basename $0) [--delete]"
  echo "Syncs directories to s3. Config file should be in ~/misc-utils-config.include"
  echo "Append s3 flags such as --delete to delete files not found locally, --dryrun for a dry run, and others"
}

BASH_DIR=$(dirname "$0")
source ${BASH_DIR%*/}/common/common.include
source ${HOME}/misc-utils-config.include

[ -n "${STORAGE_CLASS}" ] && STORAGE_CLASS_FLAG="--storage-class ${STORAGE_CLASS}"
[ -n "${S3_SYNC_INSECURE_SOURCE_PATH_DESTS}" ] || fail "S3_SYNC_INSECURE_SOURCE_PATH_DESTS not set in config/common.include"

echo "Syncing"

for index in ${!S3_SYNC_INSECURE_SOURCE_PATH_DESTS[@]}; do
  source="${S3_SYNC_INSECURE_SOURCE_PATH_DESTS[$index]%%,*}" || fail "Error parsing source in:${S3_SYNC_INSECURE_SOURCE_PATH_DESTS[$index]}"
  dest="${S3_SYNC_INSECURE_SOURCE_PATH_DESTS[$index]##*,}" || fail "Error parsing dest in:${S3_SYNC_INSECURE_SOURCE_PATH_DESTS[$index]}"
  echo "${source} -> ${dest}"
  #  some volumes aren't always present. Don't fail if missing
  if [ ! -e "${source}" ]; then
    echo "${source} not found. Skipping."
    continue
  fi

  # Sync all content into S3 that isn't there; pass through additional CLI args as flags on 'aws sync'
  aws s3 sync ${@} ${STORAGE_CLASS_FLAG} --no-follow-symlinks --exclude ".DS_Store" "${source}" "${dest}" || fail "error running aws s3 sync from ${source} -> ${dest}"
done

echo "DONE"
